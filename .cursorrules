# React Router v7 + Cloudflare Workers Project Rules

## Project Overview
This is a React Router v7 project with Cloudflare Workers integration, featuring server-side rendering, TypeScript, TailwindCSS, and Drizzle ORM with Cloudflare D1. React Router v7 is essentially the new version of Remix, providing a full-stack React framework.

## File Structure Conventions

### Core Files
- `app/root.tsx` - Root layout component with error boundary
- `app/entry.server.tsx` - Server-side rendering entry point
- `app/routes.ts` - Route configuration using `@react-router/dev/routes`
- `app/app.css` - Global styles (TailwindCSS)
- `app/routes/` - Route components directory
- `app/db/` - Database schema and connection
- `app/services/` - Business logic services
- `drizzle/` - Database migrations

### Route Files
- Route files should be in `app/routes/` directory
- Use `.tsx` extension for route components
- Follow the naming convention: `route-name.tsx` or `route-name/route.tsx`
- Nested routes use directory structure: `app/routes/parent/child.tsx`

### Type Generation
- Types are auto-generated in `app/+types/` directory
- Each route gets its own type file: `app/+types/route-name.ts`
- Import types using: `import type { Route } from "./+types/route-name"`

## React Router v7 Patterns

### Route Components
```typescript
import type { Route } from "./+types/route-name";

// Meta function for document head
export function meta({}: Route.MetaArgs) {
  return [
    { title: "Page Title" },
    { name: "description", content: "Page description" },
  ];
}

// Loader function for data fetching
export function loader({ context }: Route.LoaderArgs) {
  return { data: "some data" };
}

// Action function for mutations
export function action({ request }: Route.ActionArgs) {
  // Handle form submissions, mutations, etc.
}

// Main component
export default function RouteComponent({ loaderData }: Route.ComponentProps) {
  return <div>{loaderData.data}</div>;
}
```

### Root Layout
```typescript
import type { Route } from "./+types/root";

// Links function for document head links
export const links: Route.LinksFunction = () => [
  { rel: "stylesheet", href: "/styles.css" },
];

// Layout wrapper
export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

// Error boundary
export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  // Handle errors
}
```

### Route Configuration
```typescript
import { type RouteConfig, type RouteConfigEntry, index, route } from "@react-router/dev/routes";

const API_ROUTES: RouteConfigEntry[] = [
   route('api/hello', 'routes/api/hello.ts')
];

export default [
  index("routes/home.tsx"),
  ...API_ROUTES
] satisfies RouteConfig;
```

## Cloudflare Workers Integration

### Environment Variables
- Access via `context.cloudflare.env.VARIABLE_NAME`
- Define in `wrangler.json` or Cloudflare dashboard
- Use for API keys, database connections, etc.

### Drizzle ORM + D1 Database
- Database schema in `app/db/schema.ts`
- Database connection in `app/db/index.ts`
- Business logic in `app/services/` directory
- Migrations in `drizzle/` directory
- Access D1 via `context.cloudflare.env.DB`

### Database Patterns
```typescript
// Schema definition
import { sqliteTable, text, integer } from "drizzle-orm/sqlite-core";

export const counters = sqliteTable("counters", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  value: integer("value").notNull().default(0),
});

// Database connection
import { drizzle } from "drizzle-orm/d1";
import * as schema from "./schema";

export function createDB(d1: D1Database) {
  return drizzle(d1, { schema });
}

// Service layer
export class CounterService {
  constructor(private db: ReturnType<typeof createDB>) {}
  
  async getCounter(id: string) {
    return await this.db.select().from(counters).where(eq(counters.id, id));
  }
}
```

### Server-Side Rendering
- Uses `renderToReadableStream` from React DOM
- Handles bot detection with `isbot` package
- Supports SPA mode for client-side navigation

### Type Generation
```bash
npm run cf-typegen  # Generates both Cloudflare and React Router types
npm run typegen     # React Router types only
```

## Development Patterns

### Data Loading
- Use `loader` functions for server-side data fetching
- Access data via `loaderData` prop in components
- Handle loading states with React Suspense

### Form Handling
- Use `action` functions for form submissions
- Leverage React Router's form handling
- Support both GET and POST requests

### Error Handling
- Implement `ErrorBoundary` in root and route components
- Use `isRouteErrorResponse` to distinguish error types
- Provide meaningful error messages

### Styling
- Use TailwindCSS utility classes
- Import global styles in `app/app.css`
- Use `links` function for external stylesheets

## Best Practices

### Performance
- Use `loader` functions for data fetching
- Implement proper error boundaries
- Leverage server-side rendering for SEO
- Use `ScrollRestoration` for better UX

### Type Safety
- Always import route types from `+types` directory
- Use TypeScript for all components and functions
- Leverage auto-generated types for better DX

### Code Organization
- Keep route components focused and single-purpose
- Use nested routes for complex page structures
- Separate API routes in dedicated files
- Follow consistent naming conventions

### Cloudflare Workers
- Use environment variables for configuration
- Implement proper error handling for edge functions
- Leverage Cloudflare's global edge network
- Use `wrangler` CLI for deployment and management

## Common Commands
```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run deploy       # Deploy to Cloudflare Workers
npm run preview      # Preview production build
npm run typegen      # Generate types
npm run cf-typegen   # Generate Cloudflare types
npm run db:generate  # Generate database migrations
npm run db:migrate   # Apply database migrations
npm run db:studio    # Open Drizzle Studio
```

## File Extensions and Imports
- Use `.tsx` for React components
- Use `.ts` for utility functions and API routes
- Import types with `import type` syntax
- Use relative imports for local files
- Use package imports for external dependencies

## Error Handling Patterns

```typescript
import { isRouteErrorResponse } from "react-router";

export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  if (isRouteErrorResponse(error)) {
    // Handle route-specific errors
    return <div>Route Error: {error.status}</div>;
  }
  
  // Handle unexpected errors
  return <div>Unexpected Error: {error.message}</div>;
}
```

## Form Handling Patterns

```typescript
import { Form } from "react-router";

export default function FormComponent() {
  return (
    <Form method="post">
      <input name="field" type="text" />
      <button type="submit">Submit</button>
    </Form>
  );
}

export function action({ request }: Route.ActionArgs) {
  const formData = await request.formData();
  // Process form data
  return redirect("/success");
}
```

This project follows React Router v7 conventions with Cloudflare Workers integration, emphasizing type safety, server-side rendering, and modern React patterns. 